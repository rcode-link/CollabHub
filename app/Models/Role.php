<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;

/**
 * App\Models\Role
 *
 * @property int $id
 * @property string $title
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\PermissionDefinition> $definitions
 * @property-read int|null $definitions_count
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\User> $users
 * @property-read int|null $users_count
 * @method static \Database\Factories\RoleFactory factory($count = null, $state = [])
 * @method static \Illuminate\Database\Eloquent\Builder|Role newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Role newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Role query()
 * @method static \Illuminate\Database\Eloquent\Builder|Role whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Role whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Role whereTitle($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Role whereUpdatedAt($value)
 * @property-read \App\Models\RoleResource|null $resources
 * @property int $can_be_changed
 * @property int $is_visible
 * @method static Builder|Role whereCanBeChanged($value)
 * @method static Builder|Role whereIsVisible($value)
 * @mixin \Eloquent
 */
class Role extends Model
{
    use HasFactory;


    protected $guarded = [];


    protected static function booted()
    {
        parent::booted(); // TODO: Change the autogenerated stub

        static::addGlobalScope('showPublic', function (Builder $builder) {
            $builder->where('is_visible', true);
        });
    }
    public function definitions(): BelongsToMany
    {
        return $this->belongsToMany(PermissionDefinition::class, 'permission_role', 'role_id', 'permission_definition_id');
    }

    public function users(): BelongsToMany
    {
        return $this->belongsToMany(User::class, 'user_role');
    }


    public function resources()
    {
        return $this->belongsTo(RoleResource::class, 'role_id');
    }
}
