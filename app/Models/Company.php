<?php

namespace App\Models;

use App\Events\ManagePermissionsEvent;
use Database\Factories\CompanyFactory;
use Eloquent;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\MorphMany;
use Illuminate\Support\Carbon;
use Spatie\MediaLibrary\HasMedia;
use Spatie\MediaLibrary\InteractsWithMedia;
use Spatie\MediaLibrary\MediaCollections\Models\Collections\MediaCollection;
use Spatie\MediaLibrary\MediaCollections\Models\Media;

/**
 * App\Models\Company
 *
 * @property int $id
 * @property string $name
 * @property Carbon|null $created_at
 * @property Carbon|null $updated_at
 * @property-read MediaCollection<int, Media> $media
 * @property-read int|null $media_count
 * @property-read Collection<int, User> $users
 * @property-read int|null $users_count
 * @method static CompanyFactory factory($count = null, $state = [])
 * @method static Builder|Company newModelQuery()
 * @method static Builder|Company newQuery()
 * @method static Builder|Company query()
 * @method static Builder|Company whereCreatedAt($value)
 * @method static Builder|Company whereId($value)
 * @method static Builder|Company whereName($value)
 * @method static Builder|Company whereUpdatedAt($value)
 * @property-read Collection<int, \App\Models\Permission> $permissions
 * @property-read int|null $permissions_count
 * @property string|null $address
 * @property string|null $city
 * @property string|null $zip
 * @property string|null $country
 * @property string|null $billing_address
 * @property string|null $billing_city
 * @property string|null $billing_zip
 * @property string|null $billing_country
 * @property int $is_costumer_company
 * @method static Builder|Company whereAddress($value)
 * @method static Builder|Company whereBillingAddress($value)
 * @method static Builder|Company whereBillingCity($value)
 * @method static Builder|Company whereBillingCountry($value)
 * @method static Builder|Company whereBillingZip($value)
 * @method static Builder|Company whereCity($value)
 * @method static Builder|Company whereCountry($value)
 * @method static Builder|Company whereIsCostumerCompany($value)
 * @method static Builder|Company whereZip($value)
 * @property-read \App\Models\Invoice|null $invoices
 * @property-read \App\Models\Payment|null $payments
 * @mixin Eloquent
 */
class Company extends Model implements HasMedia
{
    use HasFactory, InteractsWithMedia;

    protected $fillable = [
        'name',
        'prefix',
        'address',
        'city',
        'zip',
        'country',
        'billing_address',
        'billing_city',
        'billing_zip',
        'billing_country',
        'is_costumer_company'
    ];

    /**
     * Perform any actions required after the model boots.
     *
     * @return void
     */
    protected static function booted()
    {
        parent::booted(); // TODO: Change the autogenerated stub


        self::updated(fn() => ManagePermissionsEvent::dispatch());
    }


    public function registerMediaCollections(): void
    {
        $this
            ->addMediaCollection('avatar')
            ->singleFile()
            ->useFallbackUrl(config('app.url') . '/storage/images/avatar.png')
            ->useFallbackPath(public_path('storage/images/avatar.png'));
    }


    public function users(): BelongsToMany
    {
        return $this->belongsToMany(User::class, 'user_company');
    }

    public function invoices(): BelongsTo
    {
        return $this->belongsTo(Invoice::class);
    }
    public function payments(): BelongsTo
    {
        return $this->belongsTo(Payment::class);
    }
}
